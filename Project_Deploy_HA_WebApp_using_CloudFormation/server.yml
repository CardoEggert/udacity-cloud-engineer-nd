Parameters:
    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
    AMItoUse:
      Description: Base AMI to use inside launch configuration (leaving this as param because AMI is different in different AZs)
      Type: String
    BucketName:
      Description: Bucket where the index.html lives
      Type: String
Resources:
  RoleWithS3Access:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: 'Role for accessing s3 (read-only)'
      Policies: 
        - PolicyName: AmazonS3ReadOnlyAccess
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                     - "s3:Get*"
                     - "s3:List*"
                     - "s3-object-lambda:Get*"
                     - "s3-object-lambda:List*"
                  Resource: '*'
      RoleName: RoleWithS3ReadOnlyAccess
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} app role with s3 access
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref RoleWithS3Access
  # Define security groups
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: #For reaching internal servers
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPC-IP"
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      # For health checks
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      #Allow all traffic for egress
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  # Add load balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-2"
      SecurityGroups:
      - Ref: LoadBalancerSecGroup
  # Configure load balancer listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  # Add launch configuration
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo apt-get install awscli -y
          sudo systemctl start apache2.service
          sudo rm /var/www/html/index.html
          sudo aws s3api get-object --bucket ${BucketName} --key index.html /var/www/html/index.html   
      ImageId: !Ref AMItoUse
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium #Picking this because it has 2vCPUs and 4GiB of memory
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  # Add auto scaling groups
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  
Outputs:
  LoadBalancerDNS:
    Description: Load balancer dns url
    Value: !Join [ "", ["http://", !GetAtt WebAppLB.DNSName]] 
    Export:
      Name: !Sub "${EnvironmentName}-LB-DNS-URL"
