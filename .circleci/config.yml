version: 2.1
# Use a package of configuration called an orb.
#orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  #aws-cli: circleci/aws-cli@2.0.3
commands:
   # Exercise - Rollback
   destroy_environment:
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

# Define the jobs we want to run for this project
jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file CI:CD/exercise-infra-creation/template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
      # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.12-rc-alpine #python.3.7 image did not work
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["ae:84:22:1e:28:ac:ba:f6:e4:86:d3:3c:26:26:d7:02"] 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i CI:CD/exercise-config-and-deployment/inventory CI:CD/exercise-config-and-deployment/main-remote.yml 
# Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: amazon/aws-cli # cannot use alpine because fallback requires aws cli
    steps:
      - checkout
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      - destroy_environment
# Sequential workflow
workflows:
  # Name the workflow
  configure_infra_wf:
    jobs:
      - create_infrastructure
      - smoke_test:
          requires:
            - create_infrastructure